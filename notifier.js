// const TelegramBot = require("node-telegram-bot-api");

// const token = "7679080253:AAHNA7a7cGGLOZX8WR4MX46AOso1csYwnBU"; // –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
// const bot = new TelegramBot(token);

// function notifyUser(userId, status) {
//   let statusText = "";
//   let options = {};
//   switch (status) {
//     case "accepted":
//       statusText = "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç.";
//       break;
//     case "cooking":
//       statusText = "üë®‚Äçüç≥ –í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤–∏—Ç—Å—è.";
//       break;
//     case "ready":
//       statusText = "üì¶ –í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∏ –æ–∂–∏–¥–∞–µ—Ç –Ω–∞ –≤—ã–¥–∞—á–µ.";
//       break;
//     case "paid":
//       statusText = "üíµ –°–ø–∞—Å–∏–±–æ! –ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!";
//       break;
//     default:
//       statusText = `‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: ${status}`;
//       options = {
//         reply_markup: {
//           keyboard: [["–û–ø–ª–∞—á–µ–Ω–æ"]],
//           resize_keyboard: true,
//         },
//       };
//   }

//   bot.sendMessage(userId, statusText, options).catch(console.error);
// }

// module.exports = notifyUser;

const TelegramBot = require("node-telegram-bot-api");
const token = "7679080253:AAHNA7a7cGGLOZX8WR4MX46AOso1csYwnBU";
const bot = new TelegramBot(token, { polling: false });

// function notifyUser(userId, status, order) {
//   let message = "";

//   switch (status) {
//     case "accepted":
//       message = `‚úÖ –ó–∞–∫–∞–∑ #${order.id} –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É.`;
//       break;
//     case "ready":
//       message = `üçΩ –ó–∞–∫–∞–∑ #${order.id} –≥–æ—Ç–æ–≤! –ü–æ–¥–æ–π–¥–∏—Ç–µ –∑–∞ –Ω–∏–º.`;
//       bot.sendMessage(userId, message).then(() => {
//         bot.sendMessage(userId, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", {
//           reply_markup: {
//             inline_keyboard: [
//               [
//                 {
//                   text: "–û–ø–ª–∞—á–µ–Ω–æ (–Ω–∞–ª–∏—á–Ω—ã–µ)",
//                   callback_data: `paid:${order.id}`,
//                 },
//               ],
//             ],
//           },
//         });
//       });
//       return;
//     case "paid":
//       const items = JSON.parse(order.items)
//         .map((i) => `${i.name} ‚Äî ${i.price} –°–æ–º–æ–Ω–∏`)
//         .join("\n");
//       const total = JSON.parse(order.items).reduce(
//         (sum, i) => sum + i.price,
//         0
//       );
//       message = `‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞\n\n${items}\n\n–ò—Ç–æ–≥–æ: ${total} –°–æ–º–æ–Ω–∏\nüí∞ –û–ü–õ–ê–ß–ï–ù–û`;
//       break;
//     default:
//       message = `–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #${order.id}: ${status}`;
//   }

//   bot.sendMessage(userId, message).catch(console.error);
// }

// module.exports = notifyUser;

function notifyUser(userId, status) {
  let statusText = "";
  let options = {};
  switch (status) {
    case "accepted":
      statusText = "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç.";
      break;
    case "cooking":
      statusText = "üë®‚Äçüç≥ –í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤–∏—Ç—Å—è.";
      break;
    case "ready":
      statusText = "üì¶ –í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∏ –æ–∂–∏–¥–∞–µ—Ç –Ω–∞ –≤—ã–¥–∞—á–µ.";
      break;
    case "paid":
      statusText = "üíµ –°–ø–∞—Å–∏–±–æ! –ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!";
      break;
    default:
      statusText = `‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: ${status}`;
      options = {
        reply_markup: {
          keyboard: [["–û–ø–ª–∞—á–µ–Ω–æ"]],
          resize_keyboard: true,
        },
      };
  }

  bot.sendMessage(userId, statusText, options).catch(console.error);
}

module.exports = notifyUser;
